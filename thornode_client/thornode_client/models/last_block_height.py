# coding: utf-8

"""
    THORChain API

    This documentation outlines the API for THORChain.  NOTE: This document is a **work in progress**.  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thornode_client.configuration import Configuration


class LastBlockHeight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'last_observed_in': 'float',
        'last_sign_out': 'float',
        'thorchain': 'float'
    }

    attribute_map = {
        'chain': 'chain',
        'last_observed_in': 'last_observed_in',
        'last_sign_out': 'last_sign_out',
        'thorchain': 'thorchain'
    }

    def __init__(self, chain=None, last_observed_in=None, last_sign_out=None, thorchain=None, _configuration=None):  # noqa: E501
        """LastBlockHeight - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._chain = None
        self._last_observed_in = None
        self._last_sign_out = None
        self._thorchain = None
        self.discriminator = None

        if chain is not None:
            self.chain = chain
        if last_observed_in is not None:
            self.last_observed_in = last_observed_in
        if last_sign_out is not None:
            self.last_sign_out = last_sign_out
        if thorchain is not None:
            self.thorchain = thorchain

    @property
    def chain(self):
        """Gets the chain of this LastBlockHeight.  # noqa: E501

        chain  # noqa: E501

        :return: The chain of this LastBlockHeight.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this LastBlockHeight.

        chain  # noqa: E501

        :param chain: The chain of this LastBlockHeight.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def last_observed_in(self):
        """Gets the last_observed_in of this LastBlockHeight.  # noqa: E501

        last observed in block height  # noqa: E501

        :return: The last_observed_in of this LastBlockHeight.  # noqa: E501
        :rtype: float
        """
        return self._last_observed_in

    @last_observed_in.setter
    def last_observed_in(self, last_observed_in):
        """Sets the last_observed_in of this LastBlockHeight.

        last observed in block height  # noqa: E501

        :param last_observed_in: The last_observed_in of this LastBlockHeight.  # noqa: E501
        :type: float
        """

        self._last_observed_in = last_observed_in

    @property
    def last_sign_out(self):
        """Gets the last_sign_out of this LastBlockHeight.  # noqa: E501

        last sign out block height  # noqa: E501

        :return: The last_sign_out of this LastBlockHeight.  # noqa: E501
        :rtype: float
        """
        return self._last_sign_out

    @last_sign_out.setter
    def last_sign_out(self, last_sign_out):
        """Sets the last_sign_out of this LastBlockHeight.

        last sign out block height  # noqa: E501

        :param last_sign_out: The last_sign_out of this LastBlockHeight.  # noqa: E501
        :type: float
        """

        self._last_sign_out = last_sign_out

    @property
    def thorchain(self):
        """Gets the thorchain of this LastBlockHeight.  # noqa: E501

        current thorchain block height  # noqa: E501

        :return: The thorchain of this LastBlockHeight.  # noqa: E501
        :rtype: float
        """
        return self._thorchain

    @thorchain.setter
    def thorchain(self, thorchain):
        """Sets the thorchain of this LastBlockHeight.

        current thorchain block height  # noqa: E501

        :param thorchain: The thorchain of this LastBlockHeight.  # noqa: E501
        :type: float
        """

        self._thorchain = thorchain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LastBlockHeight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LastBlockHeight):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LastBlockHeight):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    THORChain API

    This documentation outlines the API for THORChain.  NOTE: This document is a **work in progress**.  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thornode_client.configuration import Configuration


class TxSigners(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tx_id': 'str',
        'tx': 'ObservedTx',
        'height': 'str',
        'in_tx': 'list[object]',
        'action': 'str',
        'out_txs': 'list[object]'
    }

    attribute_map = {
        'tx_id': 'tx_id',
        'tx': 'tx',
        'height': 'height',
        'in_tx': 'in_tx',
        'action': 'action',
        'out_txs': 'out_txs'
    }

    def __init__(self, tx_id=None, tx=None, height=None, in_tx=None, action=None, out_txs=None, _configuration=None):  # noqa: E501
        """TxSigners - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tx_id = None
        self._tx = None
        self._height = None
        self._in_tx = None
        self._action = None
        self._out_txs = None
        self.discriminator = None

        if tx_id is not None:
            self.tx_id = tx_id
        if tx is not None:
            self.tx = tx
        if height is not None:
            self.height = height
        if in_tx is not None:
            self.in_tx = in_tx
        if action is not None:
            self.action = action
        if out_txs is not None:
            self.out_txs = out_txs

    @property
    def tx_id(self):
        """Gets the tx_id of this TxSigners.  # noqa: E501

        tx hash  # noqa: E501

        :return: The tx_id of this TxSigners.  # noqa: E501
        :rtype: str
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this TxSigners.

        tx hash  # noqa: E501

        :param tx_id: The tx_id of this TxSigners.  # noqa: E501
        :type: str
        """

        self._tx_id = tx_id

    @property
    def tx(self):
        """Gets the tx of this TxSigners.  # noqa: E501

        observed tx , the tx that reach 2/3 majority consensus  # noqa: E501

        :return: The tx of this TxSigners.  # noqa: E501
        :rtype: ObservedTx
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this TxSigners.

        observed tx , the tx that reach 2/3 majority consensus  # noqa: E501

        :param tx: The tx of this TxSigners.  # noqa: E501
        :type: ObservedTx
        """

        self._tx = tx

    @property
    def height(self):
        """Gets the height of this TxSigners.  # noqa: E501

        block height that this tx reach super majority consensus  # noqa: E501

        :return: The height of this TxSigners.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TxSigners.

        block height that this tx reach super majority consensus  # noqa: E501

        :param height: The height of this TxSigners.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def in_tx(self):
        """Gets the in_tx of this TxSigners.  # noqa: E501

        all observed tx  # noqa: E501

        :return: The in_tx of this TxSigners.  # noqa: E501
        :rtype: list[object]
        """
        return self._in_tx

    @in_tx.setter
    def in_tx(self, in_tx):
        """Sets the in_tx of this TxSigners.

        all observed tx  # noqa: E501

        :param in_tx: The in_tx of this TxSigners.  # noqa: E501
        :type: list[object]
        """

        self._in_tx = in_tx

    @property
    def action(self):
        """Gets the action of this TxSigners.  # noqa: E501

        potential outbound tx  # noqa: E501

        :return: The action of this TxSigners.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TxSigners.

        potential outbound tx  # noqa: E501

        :param action: The action of this TxSigners.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def out_txs(self):
        """Gets the out_txs of this TxSigners.  # noqa: E501

        outbound tx hashes  # noqa: E501

        :return: The out_txs of this TxSigners.  # noqa: E501
        :rtype: list[object]
        """
        return self._out_txs

    @out_txs.setter
    def out_txs(self, out_txs):
        """Sets the out_txs of this TxSigners.

        outbound tx hashes  # noqa: E501

        :param out_txs: The out_txs of this TxSigners.  # noqa: E501
        :type: list[object]
        """

        self._out_txs = out_txs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TxSigners, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TxSigners):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TxSigners):
            return True

        return self.to_dict() != other.to_dict()

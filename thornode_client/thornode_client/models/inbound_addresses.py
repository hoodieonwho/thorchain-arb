# coding: utf-8

"""
    THORChain API

    This documentation outlines the API for THORChain.  NOTE: This document is a **work in progress**.  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thornode_client.configuration import Configuration


class InboundAddresses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'pub_key': 'str',
        'address': 'str',
        'halted': 'bool',
        'gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'pub_key': 'pub_key',
        'address': 'address',
        'halted': 'halted',
        'gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte': 'gas_rate (string) - gas rate, for ETH, it is in Gwei, for BTC/BCH/LTC it is gas_rate per vbyte'
    }

    def __init__(self, chain=None, pub_key=None, address=None, halted=None, gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte=None, _configuration=None):  # noqa: E501
        """InboundAddresses - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._chain = None
        self._pub_key = None
        self._address = None
        self._halted = None
        self._gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte = None
        self.discriminator = None

        if chain is not None:
            self.chain = chain
        if pub_key is not None:
            self.pub_key = pub_key
        if address is not None:
            self.address = address
        if halted is not None:
            self.halted = halted
        if gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte is not None:
            self.gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte = gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte

    @property
    def chain(self):
        """Gets the chain of this InboundAddresses.  # noqa: E501

        chain  # noqa: E501

        :return: The chain of this InboundAddresses.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this InboundAddresses.

        chain  # noqa: E501

        :param chain: The chain of this InboundAddresses.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def pub_key(self):
        """Gets the pub_key of this InboundAddresses.  # noqa: E501

        public key  # noqa: E501

        :return: The pub_key of this InboundAddresses.  # noqa: E501
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key):
        """Sets the pub_key of this InboundAddresses.

        public key  # noqa: E501

        :param pub_key: The pub_key of this InboundAddresses.  # noqa: E501
        :type: str
        """

        self._pub_key = pub_key

    @property
    def address(self):
        """Gets the address of this InboundAddresses.  # noqa: E501

        address  # noqa: E501

        :return: The address of this InboundAddresses.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InboundAddresses.

        address  # noqa: E501

        :param address: The address of this InboundAddresses.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def halted(self):
        """Gets the halted of this InboundAddresses.  # noqa: E501

        indicate whether this chain has halted  # noqa: E501

        :return: The halted of this InboundAddresses.  # noqa: E501
        :rtype: bool
        """
        return self._halted

    @halted.setter
    def halted(self, halted):
        """Sets the halted of this InboundAddresses.

        indicate whether this chain has halted  # noqa: E501

        :param halted: The halted of this InboundAddresses.  # noqa: E501
        :type: bool
        """

        self._halted = halted

    @property
    def gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte(self):
        """Gets the gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte of this InboundAddresses.  # noqa: E501


        :return: The gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte of this InboundAddresses.  # noqa: E501
        :rtype: str
        """
        return self._gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte

    @gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte.setter
    def gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte(self, gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte):
        """Sets the gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte of this InboundAddresses.


        :param gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte: The gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte of this InboundAddresses.  # noqa: E501
        :type: str
        """

        self._gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte = gas_rate__string___gas_rate_for_eth_it_is_in_gwei_for_btcbchltc_it_is_gas_rate_per_vbyte

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InboundAddresses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundAddresses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InboundAddresses):
            return True

        return self.to_dict() != other.to_dict()

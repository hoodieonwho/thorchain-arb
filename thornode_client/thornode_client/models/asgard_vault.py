# coding: utf-8

"""
    THORChain API

    This documentation outlines the API for THORChain.  NOTE: This document is a **work in progress**.  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thornode_client.configuration import Configuration


class AsgardVault(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_height': 'str',
        'pub_key': 'str',
        'coins': 'list[object]',
        'type': 'str',
        'status': 'str',
        'status_since': 'str',
        'membership': 'list[object]',
        'chains': 'list[object]',
        'inbound_tx_count': 'str',
        'outbound_tx_count': 'str',
        'pending_tx_heights': 'list[object]',
        'routers': 'list[object]',
        'addresses': 'list[object]'
    }

    attribute_map = {
        'block_height': 'block_height',
        'pub_key': 'pub_key',
        'coins': 'coins',
        'type': 'type',
        'status': 'status',
        'status_since': 'status_since',
        'membership': 'membership',
        'chains': 'chains',
        'inbound_tx_count': 'inbound_tx_count',
        'outbound_tx_count': 'outbound_tx_count',
        'pending_tx_heights': 'pending_tx_heights',
        'routers': 'routers',
        'addresses': 'addresses'
    }

    def __init__(self, block_height=None, pub_key=None, coins=None, type=None, status=None, status_since=None, membership=None, chains=None, inbound_tx_count=None, outbound_tx_count=None, pending_tx_heights=None, routers=None, addresses=None, _configuration=None):  # noqa: E501
        """AsgardVault - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._block_height = None
        self._pub_key = None
        self._coins = None
        self._type = None
        self._status = None
        self._status_since = None
        self._membership = None
        self._chains = None
        self._inbound_tx_count = None
        self._outbound_tx_count = None
        self._pending_tx_heights = None
        self._routers = None
        self._addresses = None
        self.discriminator = None

        if block_height is not None:
            self.block_height = block_height
        if pub_key is not None:
            self.pub_key = pub_key
        if coins is not None:
            self.coins = coins
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if status_since is not None:
            self.status_since = status_since
        if membership is not None:
            self.membership = membership
        if chains is not None:
            self.chains = chains
        if inbound_tx_count is not None:
            self.inbound_tx_count = inbound_tx_count
        if outbound_tx_count is not None:
            self.outbound_tx_count = outbound_tx_count
        if pending_tx_heights is not None:
            self.pending_tx_heights = pending_tx_heights
        if routers is not None:
            self.routers = routers
        if addresses is not None:
            self.addresses = addresses

    @property
    def block_height(self):
        """Gets the block_height of this AsgardVault.  # noqa: E501

        block height when the vault get created  # noqa: E501

        :return: The block_height of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height):
        """Sets the block_height of this AsgardVault.

        block height when the vault get created  # noqa: E501

        :param block_height: The block_height of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._block_height = block_height

    @property
    def pub_key(self):
        """Gets the pub_key of this AsgardVault.  # noqa: E501

        vault's public key  # noqa: E501

        :return: The pub_key of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key):
        """Sets the pub_key of this AsgardVault.

        vault's public key  # noqa: E501

        :param pub_key: The pub_key of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._pub_key = pub_key

    @property
    def coins(self):
        """Gets the coins of this AsgardVault.  # noqa: E501

        coins in this asgard vault  # noqa: E501

        :return: The coins of this AsgardVault.  # noqa: E501
        :rtype: list[object]
        """
        return self._coins

    @coins.setter
    def coins(self, coins):
        """Sets the coins of this AsgardVault.

        coins in this asgard vault  # noqa: E501

        :param coins: The coins of this AsgardVault.  # noqa: E501
        :type: list[object]
        """

        self._coins = coins

    @property
    def type(self):
        """Gets the type of this AsgardVault.  # noqa: E501

        vault type , it could be asgard or yggdrasil  # noqa: E501

        :return: The type of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AsgardVault.

        vault type , it could be asgard or yggdrasil  # noqa: E501

        :param type: The type of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AsgardVault.  # noqa: E501

        status , it could be active , retiring , inactive  # noqa: E501

        :return: The status of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsgardVault.

        status , it could be active , retiring , inactive  # noqa: E501

        :param status: The status of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_since(self):
        """Gets the status_since of this AsgardVault.  # noqa: E501

        block height this vault get to current status  # noqa: E501

        :return: The status_since of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._status_since

    @status_since.setter
    def status_since(self, status_since):
        """Sets the status_since of this AsgardVault.

        block height this vault get to current status  # noqa: E501

        :param status_since: The status_since of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._status_since = status_since

    @property
    def membership(self):
        """Gets the membership of this AsgardVault.  # noqa: E501

        a list of node public key , represent which nodes created this vault  # noqa: E501

        :return: The membership of this AsgardVault.  # noqa: E501
        :rtype: list[object]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this AsgardVault.

        a list of node public key , represent which nodes created this vault  # noqa: E501

        :param membership: The membership of this AsgardVault.  # noqa: E501
        :type: list[object]
        """

        self._membership = membership

    @property
    def chains(self):
        """Gets the chains of this AsgardVault.  # noqa: E501

        a list of chains this vault support  # noqa: E501

        :return: The chains of this AsgardVault.  # noqa: E501
        :rtype: list[object]
        """
        return self._chains

    @chains.setter
    def chains(self, chains):
        """Sets the chains of this AsgardVault.

        a list of chains this vault support  # noqa: E501

        :param chains: The chains of this AsgardVault.  # noqa: E501
        :type: list[object]
        """

        self._chains = chains

    @property
    def inbound_tx_count(self):
        """Gets the inbound_tx_count of this AsgardVault.  # noqa: E501

        number of inbound tx to this vault , across all chain  # noqa: E501

        :return: The inbound_tx_count of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._inbound_tx_count

    @inbound_tx_count.setter
    def inbound_tx_count(self, inbound_tx_count):
        """Sets the inbound_tx_count of this AsgardVault.

        number of inbound tx to this vault , across all chain  # noqa: E501

        :param inbound_tx_count: The inbound_tx_count of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._inbound_tx_count = inbound_tx_count

    @property
    def outbound_tx_count(self):
        """Gets the outbound_tx_count of this AsgardVault.  # noqa: E501

        number of outbound tx from this vault  # noqa: E501

        :return: The outbound_tx_count of this AsgardVault.  # noqa: E501
        :rtype: str
        """
        return self._outbound_tx_count

    @outbound_tx_count.setter
    def outbound_tx_count(self, outbound_tx_count):
        """Sets the outbound_tx_count of this AsgardVault.

        number of outbound tx from this vault  # noqa: E501

        :param outbound_tx_count: The outbound_tx_count of this AsgardVault.  # noqa: E501
        :type: str
        """

        self._outbound_tx_count = outbound_tx_count

    @property
    def pending_tx_heights(self):
        """Gets the pending_tx_heights of this AsgardVault.  # noqa: E501

        pending txes for migration  # noqa: E501

        :return: The pending_tx_heights of this AsgardVault.  # noqa: E501
        :rtype: list[object]
        """
        return self._pending_tx_heights

    @pending_tx_heights.setter
    def pending_tx_heights(self, pending_tx_heights):
        """Sets the pending_tx_heights of this AsgardVault.

        pending txes for migration  # noqa: E501

        :param pending_tx_heights: The pending_tx_heights of this AsgardVault.  # noqa: E501
        :type: list[object]
        """

        self._pending_tx_heights = pending_tx_heights

    @property
    def routers(self):
        """Gets the routers of this AsgardVault.  # noqa: E501

        chain router  # noqa: E501

        :return: The routers of this AsgardVault.  # noqa: E501
        :rtype: list[object]
        """
        return self._routers

    @routers.setter
    def routers(self, routers):
        """Sets the routers of this AsgardVault.

        chain router  # noqa: E501

        :param routers: The routers of this AsgardVault.  # noqa: E501
        :type: list[object]
        """

        self._routers = routers

    @property
    def addresses(self):
        """Gets the addresses of this AsgardVault.  # noqa: E501

        chain addresses  # noqa: E501

        :return: The addresses of this AsgardVault.  # noqa: E501
        :rtype: list[object]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this AsgardVault.

        chain addresses  # noqa: E501

        :param addresses: The addresses of this AsgardVault.  # noqa: E501
        :type: list[object]
        """

        self._addresses = addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsgardVault, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsgardVault):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AsgardVault):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    THORChain API

    This documentation outlines the API for THORChain.  NOTE: This document is a **work in progress**.  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thornode_client.configuration import Configuration


class Tx(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tx': 'ObservedTx',
        'status': 'str',
        'out_hashes': 'list[object]',
        'block_height': 'str',
        'signers': 'list[object]',
        'observed_pub_key': 'str'
    }

    attribute_map = {
        'tx': 'tx',
        'status': 'status',
        'out_hashes': 'out_hashes',
        'block_height': 'block_height',
        'signers': 'signers',
        'observed_pub_key': 'observed_pub_key'
    }

    def __init__(self, tx=None, status=None, out_hashes=None, block_height=None, signers=None, observed_pub_key=None, _configuration=None):  # noqa: E501
        """Tx - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tx = None
        self._status = None
        self._out_hashes = None
        self._block_height = None
        self._signers = None
        self._observed_pub_key = None
        self.discriminator = None

        if tx is not None:
            self.tx = tx
        if status is not None:
            self.status = status
        if out_hashes is not None:
            self.out_hashes = out_hashes
        if block_height is not None:
            self.block_height = block_height
        if signers is not None:
            self.signers = signers
        if observed_pub_key is not None:
            self.observed_pub_key = observed_pub_key

    @property
    def tx(self):
        """Gets the tx of this Tx.  # noqa: E501

        observed tx information  # noqa: E501

        :return: The tx of this Tx.  # noqa: E501
        :rtype: ObservedTx
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this Tx.

        observed tx information  # noqa: E501

        :param tx: The tx of this Tx.  # noqa: E501
        :type: ObservedTx
        """

        self._tx = tx

    @property
    def status(self):
        """Gets the status of this Tx.  # noqa: E501


        :return: The status of this Tx.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Tx.


        :param status: The status of this Tx.  # noqa: E501
        :type: str
        """
        allowed_values = ["done", "incomplete"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def out_hashes(self):
        """Gets the out_hashes of this Tx.  # noqa: E501

        a list of outbound hashes  # noqa: E501

        :return: The out_hashes of this Tx.  # noqa: E501
        :rtype: list[object]
        """
        return self._out_hashes

    @out_hashes.setter
    def out_hashes(self, out_hashes):
        """Sets the out_hashes of this Tx.

        a list of outbound hashes  # noqa: E501

        :param out_hashes: The out_hashes of this Tx.  # noqa: E501
        :type: list[object]
        """

        self._out_hashes = out_hashes

    @property
    def block_height(self):
        """Gets the block_height of this Tx.  # noqa: E501

        the block hight this tx get observed  # noqa: E501

        :return: The block_height of this Tx.  # noqa: E501
        :rtype: str
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height):
        """Sets the block_height of this Tx.

        the block hight this tx get observed  # noqa: E501

        :param block_height: The block_height of this Tx.  # noqa: E501
        :type: str
        """

        self._block_height = block_height

    @property
    def signers(self):
        """Gets the signers of this Tx.  # noqa: E501

        a list of signer address that has sign this tx off  # noqa: E501

        :return: The signers of this Tx.  # noqa: E501
        :rtype: list[object]
        """
        return self._signers

    @signers.setter
    def signers(self, signers):
        """Sets the signers of this Tx.

        a list of signer address that has sign this tx off  # noqa: E501

        :param signers: The signers of this Tx.  # noqa: E501
        :type: list[object]
        """

        self._signers = signers

    @property
    def observed_pub_key(self):
        """Gets the observed_pub_key of this Tx.  # noqa: E501

        public key of the vault which observe this tx  # noqa: E501

        :return: The observed_pub_key of this Tx.  # noqa: E501
        :rtype: str
        """
        return self._observed_pub_key

    @observed_pub_key.setter
    def observed_pub_key(self, observed_pub_key):
        """Sets the observed_pub_key of this Tx.

        public key of the vault which observe this tx  # noqa: E501

        :param observed_pub_key: The observed_pub_key of this Tx.  # noqa: E501
        :type: str
        """

        self._observed_pub_key = observed_pub_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tx, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tx):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tx):
            return True

        return self.to_dict() != other.to_dict()

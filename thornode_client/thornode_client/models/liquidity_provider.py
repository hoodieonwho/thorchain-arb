# coding: utf-8

"""
    THORChain API

    This documentation outlines the API for THORChain.  NOTE: This document is a **work in progress**.  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thornode_client.configuration import Configuration


class LiquidityProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'rune_address': 'str',
        'asset_address': 'str',
        'last_add': 'str',
        'last_withdraw': 'str',
        'units': 'str',
        'pending_rune': 'str',
        'pending_asset': 'str',
        'pending_tx_id': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'rune_address': 'rune_address',
        'asset_address': 'asset_address',
        'last_add': 'last_add',
        'last_withdraw': 'last_withdraw',
        'units': 'units',
        'pending_rune': 'pending_rune',
        'pending_asset': 'pending_asset',
        'pending_tx_id': 'pending_tx_id'
    }

    def __init__(self, asset=None, rune_address=None, asset_address=None, last_add=None, last_withdraw=None, units=None, pending_rune=None, pending_asset=None, pending_tx_id=None, _configuration=None):  # noqa: E501
        """LiquidityProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset = None
        self._rune_address = None
        self._asset_address = None
        self._last_add = None
        self._last_withdraw = None
        self._units = None
        self._pending_rune = None
        self._pending_asset = None
        self._pending_tx_id = None
        self.discriminator = None

        if asset is not None:
            self.asset = asset
        if rune_address is not None:
            self.rune_address = rune_address
        if asset_address is not None:
            self.asset_address = asset_address
        if last_add is not None:
            self.last_add = last_add
        if last_withdraw is not None:
            self.last_withdraw = last_withdraw
        if units is not None:
            self.units = units
        if pending_rune is not None:
            self.pending_rune = pending_rune
        if pending_asset is not None:
            self.pending_asset = pending_asset
        if pending_tx_id is not None:
            self.pending_tx_id = pending_tx_id

    @property
    def asset(self):
        """Gets the asset of this LiquidityProvider.  # noqa: E501

        the asset of the non-rune asset  # noqa: E501

        :return: The asset of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this LiquidityProvider.

        the asset of the non-rune asset  # noqa: E501

        :param asset: The asset of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._asset = asset

    @property
    def rune_address(self):
        """Gets the rune_address of this LiquidityProvider.  # noqa: E501

        the rune address of the liquidity provider  # noqa: E501

        :return: The rune_address of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._rune_address

    @rune_address.setter
    def rune_address(self, rune_address):
        """Sets the rune_address of this LiquidityProvider.

        the rune address of the liquidity provider  # noqa: E501

        :param rune_address: The rune_address of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._rune_address = rune_address

    @property
    def asset_address(self):
        """Gets the asset_address of this LiquidityProvider.  # noqa: E501

        the non-rune asset address of the liquidity provider  # noqa: E501

        :return: The asset_address of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._asset_address

    @asset_address.setter
    def asset_address(self, asset_address):
        """Sets the asset_address of this LiquidityProvider.

        the non-rune asset address of the liquidity provider  # noqa: E501

        :param asset_address: The asset_address of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._asset_address = asset_address

    @property
    def last_add(self):
        """Gets the last_add of this LiquidityProvider.  # noqa: E501

        block height of the last add  # noqa: E501

        :return: The last_add of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._last_add

    @last_add.setter
    def last_add(self, last_add):
        """Sets the last_add of this LiquidityProvider.

        block height of the last add  # noqa: E501

        :param last_add: The last_add of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._last_add = last_add

    @property
    def last_withdraw(self):
        """Gets the last_withdraw of this LiquidityProvider.  # noqa: E501

        block height of the last withdraw  # noqa: E501

        :return: The last_withdraw of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._last_withdraw

    @last_withdraw.setter
    def last_withdraw(self, last_withdraw):
        """Sets the last_withdraw of this LiquidityProvider.

        block height of the last withdraw  # noqa: E501

        :param last_withdraw: The last_withdraw of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._last_withdraw = last_withdraw

    @property
    def units(self):
        """Gets the units of this LiquidityProvider.  # noqa: E501

        the total number of units of the pool  # noqa: E501

        :return: The units of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this LiquidityProvider.

        the total number of units of the pool  # noqa: E501

        :param units: The units of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def pending_rune(self):
        """Gets the pending_rune of this LiquidityProvider.  # noqa: E501

        rune that has been provided, but not committed yet. Awaiting a provision of the non-rune asset  # noqa: E501

        :return: The pending_rune of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._pending_rune

    @pending_rune.setter
    def pending_rune(self, pending_rune):
        """Sets the pending_rune of this LiquidityProvider.

        rune that has been provided, but not committed yet. Awaiting a provision of the non-rune asset  # noqa: E501

        :param pending_rune: The pending_rune of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._pending_rune = pending_rune

    @property
    def pending_asset(self):
        """Gets the pending_asset of this LiquidityProvider.  # noqa: E501

        asset  # noqa: E501

        :return: The pending_asset of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._pending_asset

    @pending_asset.setter
    def pending_asset(self, pending_asset):
        """Sets the pending_asset of this LiquidityProvider.

        asset  # noqa: E501

        :param pending_asset: The pending_asset of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._pending_asset = pending_asset

    @property
    def pending_tx_id(self):
        """Gets the pending_tx_id of this LiquidityProvider.  # noqa: E501

        pending tx id  # noqa: E501

        :return: The pending_tx_id of this LiquidityProvider.  # noqa: E501
        :rtype: str
        """
        return self._pending_tx_id

    @pending_tx_id.setter
    def pending_tx_id(self, pending_tx_id):
        """Sets the pending_tx_id of this LiquidityProvider.

        pending tx id  # noqa: E501

        :param pending_tx_id: The pending_tx_id of this LiquidityProvider.  # noqa: E501
        :type: str
        """

        self._pending_tx_id = pending_tx_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiquidityProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiquidityProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LiquidityProvider):
            return True

        return self.to_dict() != other.to_dict()

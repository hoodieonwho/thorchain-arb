# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.  # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SwapHistoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'str',
        'end_time': 'str',
        'to_asset_count': 'str',
        'to_rune_count': 'str',
        'synth_mint_count': 'str',
        'synth_redeem_count': 'str',
        'total_count': 'str',
        'to_asset_volume': 'str',
        'to_rune_volume': 'str',
        'synth_mint_volume': 'str',
        'synth_redeem_volume': 'str',
        'total_volume': 'str',
        'to_asset_fees': 'str',
        'to_rune_fees': 'str',
        'synth_mint_fees': 'str',
        'synth_redeem_fees': 'str',
        'total_fees': 'str',
        'to_asset_average_slip': 'str',
        'to_rune_average_slip': 'str',
        'synth_mint_average_slip': 'str',
        'synth_redeem_average_slip': 'str',
        'average_slip': 'str',
        'rune_price_usd': 'str'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'to_asset_count': 'toAssetCount',
        'to_rune_count': 'toRuneCount',
        'synth_mint_count': 'synthMintCount',
        'synth_redeem_count': 'synthRedeemCount',
        'total_count': 'totalCount',
        'to_asset_volume': 'toAssetVolume',
        'to_rune_volume': 'toRuneVolume',
        'synth_mint_volume': 'synthMintVolume',
        'synth_redeem_volume': 'synthRedeemVolume',
        'total_volume': 'totalVolume',
        'to_asset_fees': 'toAssetFees',
        'to_rune_fees': 'toRuneFees',
        'synth_mint_fees': 'synthMintFees',
        'synth_redeem_fees': 'synthRedeemFees',
        'total_fees': 'totalFees',
        'to_asset_average_slip': 'toAssetAverageSlip',
        'to_rune_average_slip': 'toRuneAverageSlip',
        'synth_mint_average_slip': 'synthMintAverageSlip',
        'synth_redeem_average_slip': 'synthRedeemAverageSlip',
        'average_slip': 'averageSlip',
        'rune_price_usd': 'runePriceUSD'
    }

    def __init__(self, start_time=None, end_time=None, to_asset_count=None, to_rune_count=None, synth_mint_count=None, synth_redeem_count=None, total_count=None, to_asset_volume=None, to_rune_volume=None, synth_mint_volume=None, synth_redeem_volume=None, total_volume=None, to_asset_fees=None, to_rune_fees=None, synth_mint_fees=None, synth_redeem_fees=None, total_fees=None, to_asset_average_slip=None, to_rune_average_slip=None, synth_mint_average_slip=None, synth_redeem_average_slip=None, average_slip=None, rune_price_usd=None):  # noqa: E501
        """SwapHistoryItem - a model defined in Swagger"""  # noqa: E501
        self._start_time = None
        self._end_time = None
        self._to_asset_count = None
        self._to_rune_count = None
        self._synth_mint_count = None
        self._synth_redeem_count = None
        self._total_count = None
        self._to_asset_volume = None
        self._to_rune_volume = None
        self._synth_mint_volume = None
        self._synth_redeem_volume = None
        self._total_volume = None
        self._to_asset_fees = None
        self._to_rune_fees = None
        self._synth_mint_fees = None
        self._synth_redeem_fees = None
        self._total_fees = None
        self._to_asset_average_slip = None
        self._to_rune_average_slip = None
        self._synth_mint_average_slip = None
        self._synth_redeem_average_slip = None
        self._average_slip = None
        self._rune_price_usd = None
        self.discriminator = None
        self.start_time = start_time
        self.end_time = end_time
        self.to_asset_count = to_asset_count
        self.to_rune_count = to_rune_count
        self.synth_mint_count = synth_mint_count
        self.synth_redeem_count = synth_redeem_count
        self.total_count = total_count
        self.to_asset_volume = to_asset_volume
        self.to_rune_volume = to_rune_volume
        self.synth_mint_volume = synth_mint_volume
        self.synth_redeem_volume = synth_redeem_volume
        self.total_volume = total_volume
        self.to_asset_fees = to_asset_fees
        self.to_rune_fees = to_rune_fees
        self.synth_mint_fees = synth_mint_fees
        self.synth_redeem_fees = synth_redeem_fees
        self.total_fees = total_fees
        self.to_asset_average_slip = to_asset_average_slip
        self.to_rune_average_slip = to_rune_average_slip
        self.synth_mint_average_slip = synth_mint_average_slip
        self.synth_redeem_average_slip = synth_redeem_average_slip
        self.average_slip = average_slip
        self.rune_price_usd = rune_price_usd

    @property
    def start_time(self):
        """Gets the start_time of this SwapHistoryItem.  # noqa: E501

        Int64, The beginning time of bucket in unix timestamp  # noqa: E501

        :return: The start_time of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SwapHistoryItem.

        Int64, The beginning time of bucket in unix timestamp  # noqa: E501

        :param start_time: The start_time of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this SwapHistoryItem.  # noqa: E501

        Int64, The end time of bucket in unix timestamp  # noqa: E501

        :return: The end_time of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SwapHistoryItem.

        Int64, The end time of bucket in unix timestamp  # noqa: E501

        :param end_time: The end_time of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def to_asset_count(self):
        """Gets the to_asset_count of this SwapHistoryItem.  # noqa: E501

        Int64, count of swaps from rune to asset  # noqa: E501

        :return: The to_asset_count of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_asset_count

    @to_asset_count.setter
    def to_asset_count(self, to_asset_count):
        """Sets the to_asset_count of this SwapHistoryItem.

        Int64, count of swaps from rune to asset  # noqa: E501

        :param to_asset_count: The to_asset_count of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_asset_count is None:
            raise ValueError("Invalid value for `to_asset_count`, must not be `None`")  # noqa: E501

        self._to_asset_count = to_asset_count

    @property
    def to_rune_count(self):
        """Gets the to_rune_count of this SwapHistoryItem.  # noqa: E501

        Int64, count of swaps from asset to rune  # noqa: E501

        :return: The to_rune_count of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_rune_count

    @to_rune_count.setter
    def to_rune_count(self, to_rune_count):
        """Sets the to_rune_count of this SwapHistoryItem.

        Int64, count of swaps from asset to rune  # noqa: E501

        :param to_rune_count: The to_rune_count of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_rune_count is None:
            raise ValueError("Invalid value for `to_rune_count`, must not be `None`")  # noqa: E501

        self._to_rune_count = to_rune_count

    @property
    def synth_mint_count(self):
        """Gets the synth_mint_count of this SwapHistoryItem.  # noqa: E501

        Int64, count of rune to synthetic asset swaps  # noqa: E501

        :return: The synth_mint_count of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_mint_count

    @synth_mint_count.setter
    def synth_mint_count(self, synth_mint_count):
        """Sets the synth_mint_count of this SwapHistoryItem.

        Int64, count of rune to synthetic asset swaps  # noqa: E501

        :param synth_mint_count: The synth_mint_count of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_mint_count is None:
            raise ValueError("Invalid value for `synth_mint_count`, must not be `None`")  # noqa: E501

        self._synth_mint_count = synth_mint_count

    @property
    def synth_redeem_count(self):
        """Gets the synth_redeem_count of this SwapHistoryItem.  # noqa: E501

        Int64, count of synthetic asset to rune swaps  # noqa: E501

        :return: The synth_redeem_count of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_redeem_count

    @synth_redeem_count.setter
    def synth_redeem_count(self, synth_redeem_count):
        """Sets the synth_redeem_count of this SwapHistoryItem.

        Int64, count of synthetic asset to rune swaps  # noqa: E501

        :param synth_redeem_count: The synth_redeem_count of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_redeem_count is None:
            raise ValueError("Invalid value for `synth_redeem_count`, must not be `None`")  # noqa: E501

        self._synth_redeem_count = synth_redeem_count

    @property
    def total_count(self):
        """Gets the total_count of this SwapHistoryItem.  # noqa: E501

        Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount  # noqa: E501

        :return: The total_count of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SwapHistoryItem.

        Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount  # noqa: E501

        :param total_count: The total_count of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def to_asset_volume(self):
        """Gets the to_asset_volume of this SwapHistoryItem.  # noqa: E501

        Int64(e8), volume of swaps from rune to asset denoted in rune  # noqa: E501

        :return: The to_asset_volume of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_asset_volume

    @to_asset_volume.setter
    def to_asset_volume(self, to_asset_volume):
        """Sets the to_asset_volume of this SwapHistoryItem.

        Int64(e8), volume of swaps from rune to asset denoted in rune  # noqa: E501

        :param to_asset_volume: The to_asset_volume of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_asset_volume is None:
            raise ValueError("Invalid value for `to_asset_volume`, must not be `None`")  # noqa: E501

        self._to_asset_volume = to_asset_volume

    @property
    def to_rune_volume(self):
        """Gets the to_rune_volume of this SwapHistoryItem.  # noqa: E501

        Int64(e8), volume of swaps from asset to rune denoted in rune  # noqa: E501

        :return: The to_rune_volume of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_rune_volume

    @to_rune_volume.setter
    def to_rune_volume(self, to_rune_volume):
        """Sets the to_rune_volume of this SwapHistoryItem.

        Int64(e8), volume of swaps from asset to rune denoted in rune  # noqa: E501

        :param to_rune_volume: The to_rune_volume of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_rune_volume is None:
            raise ValueError("Invalid value for `to_rune_volume`, must not be `None`")  # noqa: E501

        self._to_rune_volume = to_rune_volume

    @property
    def synth_mint_volume(self):
        """Gets the synth_mint_volume of this SwapHistoryItem.  # noqa: E501

        Int64(e8), volume of swaps from rune to synthetic asset denoted in rune  # noqa: E501

        :return: The synth_mint_volume of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_mint_volume

    @synth_mint_volume.setter
    def synth_mint_volume(self, synth_mint_volume):
        """Sets the synth_mint_volume of this SwapHistoryItem.

        Int64(e8), volume of swaps from rune to synthetic asset denoted in rune  # noqa: E501

        :param synth_mint_volume: The synth_mint_volume of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_mint_volume is None:
            raise ValueError("Invalid value for `synth_mint_volume`, must not be `None`")  # noqa: E501

        self._synth_mint_volume = synth_mint_volume

    @property
    def synth_redeem_volume(self):
        """Gets the synth_redeem_volume of this SwapHistoryItem.  # noqa: E501

        Int64(e8), volume of swaps from synthetic asset to rune denoted in rune  # noqa: E501

        :return: The synth_redeem_volume of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_redeem_volume

    @synth_redeem_volume.setter
    def synth_redeem_volume(self, synth_redeem_volume):
        """Sets the synth_redeem_volume of this SwapHistoryItem.

        Int64(e8), volume of swaps from synthetic asset to rune denoted in rune  # noqa: E501

        :param synth_redeem_volume: The synth_redeem_volume of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_redeem_volume is None:
            raise ValueError("Invalid value for `synth_redeem_volume`, must not be `None`")  # noqa: E501

        self._synth_redeem_volume = synth_redeem_volume

    @property
    def total_volume(self):
        """Gets the total_volume of this SwapHistoryItem.  # noqa: E501

        Int64(e8), toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)   # noqa: E501

        :return: The total_volume of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this SwapHistoryItem.

        Int64(e8), toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)   # noqa: E501

        :param total_volume: The total_volume of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if total_volume is None:
            raise ValueError("Invalid value for `total_volume`, must not be `None`")  # noqa: E501

        self._total_volume = total_volume

    @property
    def to_asset_fees(self):
        """Gets the to_asset_fees of this SwapHistoryItem.  # noqa: E501

        Int64(e8), the fees collected from swaps from rune to asset (in rune)  # noqa: E501

        :return: The to_asset_fees of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_asset_fees

    @to_asset_fees.setter
    def to_asset_fees(self, to_asset_fees):
        """Sets the to_asset_fees of this SwapHistoryItem.

        Int64(e8), the fees collected from swaps from rune to asset (in rune)  # noqa: E501

        :param to_asset_fees: The to_asset_fees of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_asset_fees is None:
            raise ValueError("Invalid value for `to_asset_fees`, must not be `None`")  # noqa: E501

        self._to_asset_fees = to_asset_fees

    @property
    def to_rune_fees(self):
        """Gets the to_rune_fees of this SwapHistoryItem.  # noqa: E501

        Int64(e8), the fees collected from swaps from asset to rune (in rune)  # noqa: E501

        :return: The to_rune_fees of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_rune_fees

    @to_rune_fees.setter
    def to_rune_fees(self, to_rune_fees):
        """Sets the to_rune_fees of this SwapHistoryItem.

        Int64(e8), the fees collected from swaps from asset to rune (in rune)  # noqa: E501

        :param to_rune_fees: The to_rune_fees of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_rune_fees is None:
            raise ValueError("Invalid value for `to_rune_fees`, must not be `None`")  # noqa: E501

        self._to_rune_fees = to_rune_fees

    @property
    def synth_mint_fees(self):
        """Gets the synth_mint_fees of this SwapHistoryItem.  # noqa: E501

        Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)   # noqa: E501

        :return: The synth_mint_fees of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_mint_fees

    @synth_mint_fees.setter
    def synth_mint_fees(self, synth_mint_fees):
        """Sets the synth_mint_fees of this SwapHistoryItem.

        Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)   # noqa: E501

        :param synth_mint_fees: The synth_mint_fees of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_mint_fees is None:
            raise ValueError("Invalid value for `synth_mint_fees`, must not be `None`")  # noqa: E501

        self._synth_mint_fees = synth_mint_fees

    @property
    def synth_redeem_fees(self):
        """Gets the synth_redeem_fees of this SwapHistoryItem.  # noqa: E501

        Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)   # noqa: E501

        :return: The synth_redeem_fees of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_redeem_fees

    @synth_redeem_fees.setter
    def synth_redeem_fees(self, synth_redeem_fees):
        """Sets the synth_redeem_fees of this SwapHistoryItem.

        Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)   # noqa: E501

        :param synth_redeem_fees: The synth_redeem_fees of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_redeem_fees is None:
            raise ValueError("Invalid value for `synth_redeem_fees`, must not be `None`")  # noqa: E501

        self._synth_redeem_fees = synth_redeem_fees

    @property
    def total_fees(self):
        """Gets the total_fees of this SwapHistoryItem.  # noqa: E501

        Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees  # noqa: E501

        :return: The total_fees of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._total_fees

    @total_fees.setter
    def total_fees(self, total_fees):
        """Sets the total_fees of this SwapHistoryItem.

        Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees  # noqa: E501

        :param total_fees: The total_fees of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if total_fees is None:
            raise ValueError("Invalid value for `total_fees`, must not be `None`")  # noqa: E501

        self._total_fees = total_fees

    @property
    def to_asset_average_slip(self):
        """Gets the to_asset_average_slip of this SwapHistoryItem.  # noqa: E501

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from rune to asset. Big swaps have the same weight as small swaps   # noqa: E501

        :return: The to_asset_average_slip of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_asset_average_slip

    @to_asset_average_slip.setter
    def to_asset_average_slip(self, to_asset_average_slip):
        """Sets the to_asset_average_slip of this SwapHistoryItem.

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from rune to asset. Big swaps have the same weight as small swaps   # noqa: E501

        :param to_asset_average_slip: The to_asset_average_slip of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_asset_average_slip is None:
            raise ValueError("Invalid value for `to_asset_average_slip`, must not be `None`")  # noqa: E501

        self._to_asset_average_slip = to_asset_average_slip

    @property
    def to_rune_average_slip(self):
        """Gets the to_rune_average_slip of this SwapHistoryItem.  # noqa: E501

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from asset to rune. Big swaps have the same weight as small swaps   # noqa: E501

        :return: The to_rune_average_slip of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._to_rune_average_slip

    @to_rune_average_slip.setter
    def to_rune_average_slip(self, to_rune_average_slip):
        """Sets the to_rune_average_slip of this SwapHistoryItem.

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from asset to rune. Big swaps have the same weight as small swaps   # noqa: E501

        :param to_rune_average_slip: The to_rune_average_slip of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if to_rune_average_slip is None:
            raise ValueError("Invalid value for `to_rune_average_slip`, must not be `None`")  # noqa: E501

        self._to_rune_average_slip = to_rune_average_slip

    @property
    def synth_mint_average_slip(self):
        """Gets the synth_mint_average_slip of this SwapHistoryItem.  # noqa: E501

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from rune to synthetic asset. Big swaps have the same weight as small swaps   # noqa: E501

        :return: The synth_mint_average_slip of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_mint_average_slip

    @synth_mint_average_slip.setter
    def synth_mint_average_slip(self, synth_mint_average_slip):
        """Sets the synth_mint_average_slip of this SwapHistoryItem.

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from rune to synthetic asset. Big swaps have the same weight as small swaps   # noqa: E501

        :param synth_mint_average_slip: The synth_mint_average_slip of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_mint_average_slip is None:
            raise ValueError("Invalid value for `synth_mint_average_slip`, must not be `None`")  # noqa: E501

        self._synth_mint_average_slip = synth_mint_average_slip

    @property
    def synth_redeem_average_slip(self):
        """Gets the synth_redeem_average_slip of this SwapHistoryItem.  # noqa: E501

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from synthetic asset to rune. Big swaps have the same weight as small swaps   # noqa: E501

        :return: The synth_redeem_average_slip of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._synth_redeem_average_slip

    @synth_redeem_average_slip.setter
    def synth_redeem_average_slip(self, synth_redeem_average_slip):
        """Sets the synth_redeem_average_slip of this SwapHistoryItem.

        Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps from synthetic asset to rune. Big swaps have the same weight as small swaps   # noqa: E501

        :param synth_redeem_average_slip: The synth_redeem_average_slip of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if synth_redeem_average_slip is None:
            raise ValueError("Invalid value for `synth_redeem_average_slip`, must not be `None`")  # noqa: E501

        self._synth_redeem_average_slip = synth_redeem_average_slip

    @property
    def average_slip(self):
        """Gets the average_slip of this SwapHistoryItem.  # noqa: E501

        Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count) of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip. Big swaps have the same weight as small swaps.   # noqa: E501

        :return: The average_slip of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._average_slip

    @average_slip.setter
    def average_slip(self, average_slip):
        """Sets the average_slip of this SwapHistoryItem.

        Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count) of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip. Big swaps have the same weight as small swaps.   # noqa: E501

        :param average_slip: The average_slip of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if average_slip is None:
            raise ValueError("Invalid value for `average_slip`, must not be `None`")  # noqa: E501

        self._average_slip = average_slip

    @property
    def rune_price_usd(self):
        """Gets the rune_price_usd of this SwapHistoryItem.  # noqa: E501

        Float, the price of Rune based on the deepest USD pool at the end of the interval.   # noqa: E501

        :return: The rune_price_usd of this SwapHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._rune_price_usd

    @rune_price_usd.setter
    def rune_price_usd(self, rune_price_usd):
        """Sets the rune_price_usd of this SwapHistoryItem.

        Float, the price of Rune based on the deepest USD pool at the end of the interval.   # noqa: E501

        :param rune_price_usd: The rune_price_usd of this SwapHistoryItem.  # noqa: E501
        :type: str
        """
        if rune_price_usd is None:
            raise ValueError("Invalid value for `rune_price_usd`, must not be `None`")  # noqa: E501

        self._rune_price_usd = rune_price_usd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwapHistoryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwapHistoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

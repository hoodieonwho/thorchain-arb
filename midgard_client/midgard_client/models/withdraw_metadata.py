# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.  # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WithdrawMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'liquidity_units': 'str',
        'asymmetry': 'str',
        'basis_points': 'str',
        'network_fees': 'NetworkFees',
        'impermanent_loss_protection': 'str'
    }

    attribute_map = {
        'liquidity_units': 'liquidityUnits',
        'asymmetry': 'asymmetry',
        'basis_points': 'basisPoints',
        'network_fees': 'networkFees',
        'impermanent_loss_protection': 'impermanentLossProtection'
    }

    def __init__(self, liquidity_units=None, asymmetry=None, basis_points=None, network_fees=None, impermanent_loss_protection=None):  # noqa: E501
        """WithdrawMetadata - a model defined in Swagger"""  # noqa: E501
        self._liquidity_units = None
        self._asymmetry = None
        self._basis_points = None
        self._network_fees = None
        self._impermanent_loss_protection = None
        self.discriminator = None
        self.liquidity_units = liquidity_units
        self.asymmetry = asymmetry
        self.basis_points = basis_points
        self.network_fees = network_fees
        self.impermanent_loss_protection = impermanent_loss_protection

    @property
    def liquidity_units(self):
        """Gets the liquidity_units of this WithdrawMetadata.  # noqa: E501

        Int64, amount of liquidity units removed from the member as result of the withdrawal  # noqa: E501

        :return: The liquidity_units of this WithdrawMetadata.  # noqa: E501
        :rtype: str
        """
        return self._liquidity_units

    @liquidity_units.setter
    def liquidity_units(self, liquidity_units):
        """Sets the liquidity_units of this WithdrawMetadata.

        Int64, amount of liquidity units removed from the member as result of the withdrawal  # noqa: E501

        :param liquidity_units: The liquidity_units of this WithdrawMetadata.  # noqa: E501
        :type: str
        """
        if liquidity_units is None:
            raise ValueError("Invalid value for `liquidity_units`, must not be `None`")  # noqa: E501

        self._liquidity_units = liquidity_units

    @property
    def asymmetry(self):
        """Gets the asymmetry of this WithdrawMetadata.  # noqa: E501

        Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical  # noqa: E501

        :return: The asymmetry of this WithdrawMetadata.  # noqa: E501
        :rtype: str
        """
        return self._asymmetry

    @asymmetry.setter
    def asymmetry(self, asymmetry):
        """Sets the asymmetry of this WithdrawMetadata.

        Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical  # noqa: E501

        :param asymmetry: The asymmetry of this WithdrawMetadata.  # noqa: E501
        :type: str
        """
        if asymmetry is None:
            raise ValueError("Invalid value for `asymmetry`, must not be `None`")  # noqa: E501

        self._asymmetry = asymmetry

    @property
    def basis_points(self):
        """Gets the basis_points of this WithdrawMetadata.  # noqa: E501

        Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn  # noqa: E501

        :return: The basis_points of this WithdrawMetadata.  # noqa: E501
        :rtype: str
        """
        return self._basis_points

    @basis_points.setter
    def basis_points(self, basis_points):
        """Sets the basis_points of this WithdrawMetadata.

        Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn  # noqa: E501

        :param basis_points: The basis_points of this WithdrawMetadata.  # noqa: E501
        :type: str
        """
        if basis_points is None:
            raise ValueError("Invalid value for `basis_points`, must not be `None`")  # noqa: E501

        self._basis_points = basis_points

    @property
    def network_fees(self):
        """Gets the network_fees of this WithdrawMetadata.  # noqa: E501


        :return: The network_fees of this WithdrawMetadata.  # noqa: E501
        :rtype: NetworkFees
        """
        return self._network_fees

    @network_fees.setter
    def network_fees(self, network_fees):
        """Sets the network_fees of this WithdrawMetadata.


        :param network_fees: The network_fees of this WithdrawMetadata.  # noqa: E501
        :type: NetworkFees
        """
        if network_fees is None:
            raise ValueError("Invalid value for `network_fees`, must not be `None`")  # noqa: E501

        self._network_fees = network_fees

    @property
    def impermanent_loss_protection(self):
        """Gets the impermanent_loss_protection of this WithdrawMetadata.  # noqa: E501

        Int64, additional Rune payed out because of impermanent loss protection  # noqa: E501

        :return: The impermanent_loss_protection of this WithdrawMetadata.  # noqa: E501
        :rtype: str
        """
        return self._impermanent_loss_protection

    @impermanent_loss_protection.setter
    def impermanent_loss_protection(self, impermanent_loss_protection):
        """Sets the impermanent_loss_protection of this WithdrawMetadata.

        Int64, additional Rune payed out because of impermanent loss protection  # noqa: E501

        :param impermanent_loss_protection: The impermanent_loss_protection of this WithdrawMetadata.  # noqa: E501
        :type: str
        """
        if impermanent_loss_protection is None:
            raise ValueError("Invalid value for `impermanent_loss_protection`, must not be `None`")  # noqa: E501

        self._impermanent_loss_protection = impermanent_loss_protection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.  # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SwapHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meta': 'SwapHistoryItem',
        'intervals': 'SwapHistoryIntervals'
    }

    attribute_map = {
        'meta': 'meta',
        'intervals': 'intervals'
    }

    def __init__(self, meta=None, intervals=None):  # noqa: E501
        """SwapHistory - a model defined in Swagger"""  # noqa: E501
        self._meta = None
        self._intervals = None
        self.discriminator = None
        self.meta = meta
        self.intervals = intervals

    @property
    def meta(self):
        """Gets the meta of this SwapHistory.  # noqa: E501


        :return: The meta of this SwapHistory.  # noqa: E501
        :rtype: SwapHistoryItem
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this SwapHistory.


        :param meta: The meta of this SwapHistory.  # noqa: E501
        :type: SwapHistoryItem
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def intervals(self):
        """Gets the intervals of this SwapHistory.  # noqa: E501


        :return: The intervals of this SwapHistory.  # noqa: E501
        :rtype: SwapHistoryIntervals
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this SwapHistory.


        :param intervals: The intervals of this SwapHistory.  # noqa: E501
        :type: SwapHistoryIntervals
        """
        if intervals is None:
            raise ValueError("Invalid value for `intervals`, must not be `None`")  # noqa: E501

        self._intervals = intervals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwapHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwapHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

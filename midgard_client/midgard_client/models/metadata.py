# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.  # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'swap': 'SwapMetadata',
        'add_liquidity': 'AddLiquidityMetadata',
        'withdraw': 'WithdrawMetadata',
        'refund': 'RefundMetadata'
    }

    attribute_map = {
        'swap': 'swap',
        'add_liquidity': 'addLiquidity',
        'withdraw': 'withdraw',
        'refund': 'refund'
    }

    def __init__(self, swap=None, add_liquidity=None, withdraw=None, refund=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501
        self._swap = None
        self._add_liquidity = None
        self._withdraw = None
        self._refund = None
        self.discriminator = None
        if swap is not None:
            self.swap = swap
        if add_liquidity is not None:
            self.add_liquidity = add_liquidity
        if withdraw is not None:
            self.withdraw = withdraw
        if refund is not None:
            self.refund = refund

    @property
    def swap(self):
        """Gets the swap of this Metadata.  # noqa: E501


        :return: The swap of this Metadata.  # noqa: E501
        :rtype: SwapMetadata
        """
        return self._swap

    @swap.setter
    def swap(self, swap):
        """Sets the swap of this Metadata.


        :param swap: The swap of this Metadata.  # noqa: E501
        :type: SwapMetadata
        """

        self._swap = swap

    @property
    def add_liquidity(self):
        """Gets the add_liquidity of this Metadata.  # noqa: E501


        :return: The add_liquidity of this Metadata.  # noqa: E501
        :rtype: AddLiquidityMetadata
        """
        return self._add_liquidity

    @add_liquidity.setter
    def add_liquidity(self, add_liquidity):
        """Sets the add_liquidity of this Metadata.


        :param add_liquidity: The add_liquidity of this Metadata.  # noqa: E501
        :type: AddLiquidityMetadata
        """

        self._add_liquidity = add_liquidity

    @property
    def withdraw(self):
        """Gets the withdraw of this Metadata.  # noqa: E501


        :return: The withdraw of this Metadata.  # noqa: E501
        :rtype: WithdrawMetadata
        """
        return self._withdraw

    @withdraw.setter
    def withdraw(self, withdraw):
        """Sets the withdraw of this Metadata.


        :param withdraw: The withdraw of this Metadata.  # noqa: E501
        :type: WithdrawMetadata
        """

        self._withdraw = withdraw

    @property
    def refund(self):
        """Gets the refund of this Metadata.  # noqa: E501


        :return: The refund of this Metadata.  # noqa: E501
        :rtype: RefundMetadata
        """
        return self._refund

    @refund.setter
    def refund(self, refund):
        """Sets the refund of this Metadata.


        :param refund: The refund of this Metadata.  # noqa: E501
        :type: RefundMetadata
        """

        self._refund = refund

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

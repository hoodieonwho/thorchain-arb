# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.  # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Int64Constants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asgard_size': 'int',
        'bad_validator_rate': 'int',
        'bad_validator_redline': 'int',
        'blocks_per_year': 'int',
        'churn_interval': 'int',
        'churn_retry_interval': 'int',
        'desired_validator_set': 'int',
        'double_sign_max_age': 'int',
        'emission_curve': 'int',
        'fail_keygen_slash_points': 'int',
        'fail_keysign_slash_points': 'int',
        'full_imp_loss_protection_blocks': 'int',
        'fund_migration_interval': 'int',
        'incentive_curve': 'int',
        'jail_time_keygen': 'int',
        'jail_time_keysign': 'int',
        'lack_of_observation_penalty': 'int',
        'liquidity_lock_up_blocks': 'int',
        'max_available_pools': 'int',
        'max_swaps_per_block': 'int',
        'min_rune_pool_depth': 'int',
        'min_slash_points_for_bad_validator': 'int',
        'min_swaps_per_block': 'int',
        'minimum_bond_in_rune': 'int',
        'minimum_nodes_for_bft': 'int',
        'minimum_nodes_for_yggdrasil': 'int',
        'native_transaction_fee': 'int',
        'new_pool_cycle': 'int',
        'observation_delay_flexibility': 'int',
        'observe_slash_points': 'int',
        'old_validator_rate': 'int',
        'outbound_transaction_fee': 'int',
        'pool_cycle': 'int',
        'signing_transaction_period': 'int',
        'virtual_mult_synths': 'int',
        'ygg_fund_limit': 'int'
    }

    attribute_map = {
        'asgard_size': 'AsgardSize',
        'bad_validator_rate': 'BadValidatorRate',
        'bad_validator_redline': 'BadValidatorRedline',
        'blocks_per_year': 'BlocksPerYear',
        'churn_interval': 'ChurnInterval',
        'churn_retry_interval': 'ChurnRetryInterval',
        'desired_validator_set': 'DesiredValidatorSet',
        'double_sign_max_age': 'DoubleSignMaxAge',
        'emission_curve': 'EmissionCurve',
        'fail_keygen_slash_points': 'FailKeygenSlashPoints',
        'fail_keysign_slash_points': 'FailKeysignSlashPoints',
        'full_imp_loss_protection_blocks': 'FullImpLossProtectionBlocks',
        'fund_migration_interval': 'FundMigrationInterval',
        'incentive_curve': 'IncentiveCurve',
        'jail_time_keygen': 'JailTimeKeygen',
        'jail_time_keysign': 'JailTimeKeysign',
        'lack_of_observation_penalty': 'LackOfObservationPenalty',
        'liquidity_lock_up_blocks': 'LiquidityLockUpBlocks',
        'max_available_pools': 'MaxAvailablePools',
        'max_swaps_per_block': 'MaxSwapsPerBlock',
        'min_rune_pool_depth': 'MinRunePoolDepth',
        'min_slash_points_for_bad_validator': 'MinSlashPointsForBadValidator',
        'min_swaps_per_block': 'MinSwapsPerBlock',
        'minimum_bond_in_rune': 'MinimumBondInRune',
        'minimum_nodes_for_bft': 'MinimumNodesForBFT',
        'minimum_nodes_for_yggdrasil': 'MinimumNodesForYggdrasil',
        'native_transaction_fee': 'NativeTransactionFee',
        'new_pool_cycle': 'NewPoolCycle',
        'observation_delay_flexibility': 'ObservationDelayFlexibility',
        'observe_slash_points': 'ObserveSlashPoints',
        'old_validator_rate': 'OldValidatorRate',
        'outbound_transaction_fee': 'OutboundTransactionFee',
        'pool_cycle': 'PoolCycle',
        'signing_transaction_period': 'SigningTransactionPeriod',
        'virtual_mult_synths': 'VirtualMultSynths',
        'ygg_fund_limit': 'YggFundLimit'
    }

    def __init__(self, asgard_size=None, bad_validator_rate=None, bad_validator_redline=None, blocks_per_year=None, churn_interval=None, churn_retry_interval=None, desired_validator_set=None, double_sign_max_age=None, emission_curve=None, fail_keygen_slash_points=None, fail_keysign_slash_points=None, full_imp_loss_protection_blocks=None, fund_migration_interval=None, incentive_curve=None, jail_time_keygen=None, jail_time_keysign=None, lack_of_observation_penalty=None, liquidity_lock_up_blocks=None, max_available_pools=None, max_swaps_per_block=None, min_rune_pool_depth=None, min_slash_points_for_bad_validator=None, min_swaps_per_block=None, minimum_bond_in_rune=None, minimum_nodes_for_bft=None, minimum_nodes_for_yggdrasil=None, native_transaction_fee=None, new_pool_cycle=None, observation_delay_flexibility=None, observe_slash_points=None, old_validator_rate=None, outbound_transaction_fee=None, pool_cycle=None, signing_transaction_period=None, virtual_mult_synths=None, ygg_fund_limit=None):  # noqa: E501
        """Int64Constants - a model defined in Swagger"""  # noqa: E501
        self._asgard_size = None
        self._bad_validator_rate = None
        self._bad_validator_redline = None
        self._blocks_per_year = None
        self._churn_interval = None
        self._churn_retry_interval = None
        self._desired_validator_set = None
        self._double_sign_max_age = None
        self._emission_curve = None
        self._fail_keygen_slash_points = None
        self._fail_keysign_slash_points = None
        self._full_imp_loss_protection_blocks = None
        self._fund_migration_interval = None
        self._incentive_curve = None
        self._jail_time_keygen = None
        self._jail_time_keysign = None
        self._lack_of_observation_penalty = None
        self._liquidity_lock_up_blocks = None
        self._max_available_pools = None
        self._max_swaps_per_block = None
        self._min_rune_pool_depth = None
        self._min_slash_points_for_bad_validator = None
        self._min_swaps_per_block = None
        self._minimum_bond_in_rune = None
        self._minimum_nodes_for_bft = None
        self._minimum_nodes_for_yggdrasil = None
        self._native_transaction_fee = None
        self._new_pool_cycle = None
        self._observation_delay_flexibility = None
        self._observe_slash_points = None
        self._old_validator_rate = None
        self._outbound_transaction_fee = None
        self._pool_cycle = None
        self._signing_transaction_period = None
        self._virtual_mult_synths = None
        self._ygg_fund_limit = None
        self.discriminator = None
        self.asgard_size = asgard_size
        self.bad_validator_rate = bad_validator_rate
        self.bad_validator_redline = bad_validator_redline
        self.blocks_per_year = blocks_per_year
        self.churn_interval = churn_interval
        self.churn_retry_interval = churn_retry_interval
        self.desired_validator_set = desired_validator_set
        self.double_sign_max_age = double_sign_max_age
        self.emission_curve = emission_curve
        self.fail_keygen_slash_points = fail_keygen_slash_points
        self.fail_keysign_slash_points = fail_keysign_slash_points
        self.full_imp_loss_protection_blocks = full_imp_loss_protection_blocks
        self.fund_migration_interval = fund_migration_interval
        self.incentive_curve = incentive_curve
        self.jail_time_keygen = jail_time_keygen
        self.jail_time_keysign = jail_time_keysign
        self.lack_of_observation_penalty = lack_of_observation_penalty
        self.liquidity_lock_up_blocks = liquidity_lock_up_blocks
        self.max_available_pools = max_available_pools
        self.max_swaps_per_block = max_swaps_per_block
        self.min_rune_pool_depth = min_rune_pool_depth
        self.min_slash_points_for_bad_validator = min_slash_points_for_bad_validator
        self.min_swaps_per_block = min_swaps_per_block
        self.minimum_bond_in_rune = minimum_bond_in_rune
        self.minimum_nodes_for_bft = minimum_nodes_for_bft
        self.minimum_nodes_for_yggdrasil = minimum_nodes_for_yggdrasil
        self.native_transaction_fee = native_transaction_fee
        if new_pool_cycle is not None:
            self.new_pool_cycle = new_pool_cycle
        self.observation_delay_flexibility = observation_delay_flexibility
        self.observe_slash_points = observe_slash_points
        self.old_validator_rate = old_validator_rate
        self.outbound_transaction_fee = outbound_transaction_fee
        self.pool_cycle = pool_cycle
        self.signing_transaction_period = signing_transaction_period
        self.virtual_mult_synths = virtual_mult_synths
        self.ygg_fund_limit = ygg_fund_limit

    @property
    def asgard_size(self):
        """Gets the asgard_size of this Int64Constants.  # noqa: E501


        :return: The asgard_size of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._asgard_size

    @asgard_size.setter
    def asgard_size(self, asgard_size):
        """Sets the asgard_size of this Int64Constants.


        :param asgard_size: The asgard_size of this Int64Constants.  # noqa: E501
        :type: int
        """
        if asgard_size is None:
            raise ValueError("Invalid value for `asgard_size`, must not be `None`")  # noqa: E501

        self._asgard_size = asgard_size

    @property
    def bad_validator_rate(self):
        """Gets the bad_validator_rate of this Int64Constants.  # noqa: E501


        :return: The bad_validator_rate of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._bad_validator_rate

    @bad_validator_rate.setter
    def bad_validator_rate(self, bad_validator_rate):
        """Sets the bad_validator_rate of this Int64Constants.


        :param bad_validator_rate: The bad_validator_rate of this Int64Constants.  # noqa: E501
        :type: int
        """
        if bad_validator_rate is None:
            raise ValueError("Invalid value for `bad_validator_rate`, must not be `None`")  # noqa: E501

        self._bad_validator_rate = bad_validator_rate

    @property
    def bad_validator_redline(self):
        """Gets the bad_validator_redline of this Int64Constants.  # noqa: E501


        :return: The bad_validator_redline of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._bad_validator_redline

    @bad_validator_redline.setter
    def bad_validator_redline(self, bad_validator_redline):
        """Sets the bad_validator_redline of this Int64Constants.


        :param bad_validator_redline: The bad_validator_redline of this Int64Constants.  # noqa: E501
        :type: int
        """
        if bad_validator_redline is None:
            raise ValueError("Invalid value for `bad_validator_redline`, must not be `None`")  # noqa: E501

        self._bad_validator_redline = bad_validator_redline

    @property
    def blocks_per_year(self):
        """Gets the blocks_per_year of this Int64Constants.  # noqa: E501


        :return: The blocks_per_year of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._blocks_per_year

    @blocks_per_year.setter
    def blocks_per_year(self, blocks_per_year):
        """Sets the blocks_per_year of this Int64Constants.


        :param blocks_per_year: The blocks_per_year of this Int64Constants.  # noqa: E501
        :type: int
        """
        if blocks_per_year is None:
            raise ValueError("Invalid value for `blocks_per_year`, must not be `None`")  # noqa: E501

        self._blocks_per_year = blocks_per_year

    @property
    def churn_interval(self):
        """Gets the churn_interval of this Int64Constants.  # noqa: E501


        :return: The churn_interval of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._churn_interval

    @churn_interval.setter
    def churn_interval(self, churn_interval):
        """Sets the churn_interval of this Int64Constants.


        :param churn_interval: The churn_interval of this Int64Constants.  # noqa: E501
        :type: int
        """
        if churn_interval is None:
            raise ValueError("Invalid value for `churn_interval`, must not be `None`")  # noqa: E501

        self._churn_interval = churn_interval

    @property
    def churn_retry_interval(self):
        """Gets the churn_retry_interval of this Int64Constants.  # noqa: E501


        :return: The churn_retry_interval of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._churn_retry_interval

    @churn_retry_interval.setter
    def churn_retry_interval(self, churn_retry_interval):
        """Sets the churn_retry_interval of this Int64Constants.


        :param churn_retry_interval: The churn_retry_interval of this Int64Constants.  # noqa: E501
        :type: int
        """
        if churn_retry_interval is None:
            raise ValueError("Invalid value for `churn_retry_interval`, must not be `None`")  # noqa: E501

        self._churn_retry_interval = churn_retry_interval

    @property
    def desired_validator_set(self):
        """Gets the desired_validator_set of this Int64Constants.  # noqa: E501


        :return: The desired_validator_set of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._desired_validator_set

    @desired_validator_set.setter
    def desired_validator_set(self, desired_validator_set):
        """Sets the desired_validator_set of this Int64Constants.


        :param desired_validator_set: The desired_validator_set of this Int64Constants.  # noqa: E501
        :type: int
        """
        if desired_validator_set is None:
            raise ValueError("Invalid value for `desired_validator_set`, must not be `None`")  # noqa: E501

        self._desired_validator_set = desired_validator_set

    @property
    def double_sign_max_age(self):
        """Gets the double_sign_max_age of this Int64Constants.  # noqa: E501


        :return: The double_sign_max_age of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._double_sign_max_age

    @double_sign_max_age.setter
    def double_sign_max_age(self, double_sign_max_age):
        """Sets the double_sign_max_age of this Int64Constants.


        :param double_sign_max_age: The double_sign_max_age of this Int64Constants.  # noqa: E501
        :type: int
        """
        if double_sign_max_age is None:
            raise ValueError("Invalid value for `double_sign_max_age`, must not be `None`")  # noqa: E501

        self._double_sign_max_age = double_sign_max_age

    @property
    def emission_curve(self):
        """Gets the emission_curve of this Int64Constants.  # noqa: E501


        :return: The emission_curve of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._emission_curve

    @emission_curve.setter
    def emission_curve(self, emission_curve):
        """Sets the emission_curve of this Int64Constants.


        :param emission_curve: The emission_curve of this Int64Constants.  # noqa: E501
        :type: int
        """
        if emission_curve is None:
            raise ValueError("Invalid value for `emission_curve`, must not be `None`")  # noqa: E501

        self._emission_curve = emission_curve

    @property
    def fail_keygen_slash_points(self):
        """Gets the fail_keygen_slash_points of this Int64Constants.  # noqa: E501


        :return: The fail_keygen_slash_points of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._fail_keygen_slash_points

    @fail_keygen_slash_points.setter
    def fail_keygen_slash_points(self, fail_keygen_slash_points):
        """Sets the fail_keygen_slash_points of this Int64Constants.


        :param fail_keygen_slash_points: The fail_keygen_slash_points of this Int64Constants.  # noqa: E501
        :type: int
        """
        if fail_keygen_slash_points is None:
            raise ValueError("Invalid value for `fail_keygen_slash_points`, must not be `None`")  # noqa: E501

        self._fail_keygen_slash_points = fail_keygen_slash_points

    @property
    def fail_keysign_slash_points(self):
        """Gets the fail_keysign_slash_points of this Int64Constants.  # noqa: E501


        :return: The fail_keysign_slash_points of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._fail_keysign_slash_points

    @fail_keysign_slash_points.setter
    def fail_keysign_slash_points(self, fail_keysign_slash_points):
        """Sets the fail_keysign_slash_points of this Int64Constants.


        :param fail_keysign_slash_points: The fail_keysign_slash_points of this Int64Constants.  # noqa: E501
        :type: int
        """
        if fail_keysign_slash_points is None:
            raise ValueError("Invalid value for `fail_keysign_slash_points`, must not be `None`")  # noqa: E501

        self._fail_keysign_slash_points = fail_keysign_slash_points

    @property
    def full_imp_loss_protection_blocks(self):
        """Gets the full_imp_loss_protection_blocks of this Int64Constants.  # noqa: E501


        :return: The full_imp_loss_protection_blocks of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._full_imp_loss_protection_blocks

    @full_imp_loss_protection_blocks.setter
    def full_imp_loss_protection_blocks(self, full_imp_loss_protection_blocks):
        """Sets the full_imp_loss_protection_blocks of this Int64Constants.


        :param full_imp_loss_protection_blocks: The full_imp_loss_protection_blocks of this Int64Constants.  # noqa: E501
        :type: int
        """
        if full_imp_loss_protection_blocks is None:
            raise ValueError("Invalid value for `full_imp_loss_protection_blocks`, must not be `None`")  # noqa: E501

        self._full_imp_loss_protection_blocks = full_imp_loss_protection_blocks

    @property
    def fund_migration_interval(self):
        """Gets the fund_migration_interval of this Int64Constants.  # noqa: E501


        :return: The fund_migration_interval of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._fund_migration_interval

    @fund_migration_interval.setter
    def fund_migration_interval(self, fund_migration_interval):
        """Sets the fund_migration_interval of this Int64Constants.


        :param fund_migration_interval: The fund_migration_interval of this Int64Constants.  # noqa: E501
        :type: int
        """
        if fund_migration_interval is None:
            raise ValueError("Invalid value for `fund_migration_interval`, must not be `None`")  # noqa: E501

        self._fund_migration_interval = fund_migration_interval

    @property
    def incentive_curve(self):
        """Gets the incentive_curve of this Int64Constants.  # noqa: E501


        :return: The incentive_curve of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._incentive_curve

    @incentive_curve.setter
    def incentive_curve(self, incentive_curve):
        """Sets the incentive_curve of this Int64Constants.


        :param incentive_curve: The incentive_curve of this Int64Constants.  # noqa: E501
        :type: int
        """
        if incentive_curve is None:
            raise ValueError("Invalid value for `incentive_curve`, must not be `None`")  # noqa: E501

        self._incentive_curve = incentive_curve

    @property
    def jail_time_keygen(self):
        """Gets the jail_time_keygen of this Int64Constants.  # noqa: E501


        :return: The jail_time_keygen of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._jail_time_keygen

    @jail_time_keygen.setter
    def jail_time_keygen(self, jail_time_keygen):
        """Sets the jail_time_keygen of this Int64Constants.


        :param jail_time_keygen: The jail_time_keygen of this Int64Constants.  # noqa: E501
        :type: int
        """
        if jail_time_keygen is None:
            raise ValueError("Invalid value for `jail_time_keygen`, must not be `None`")  # noqa: E501

        self._jail_time_keygen = jail_time_keygen

    @property
    def jail_time_keysign(self):
        """Gets the jail_time_keysign of this Int64Constants.  # noqa: E501


        :return: The jail_time_keysign of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._jail_time_keysign

    @jail_time_keysign.setter
    def jail_time_keysign(self, jail_time_keysign):
        """Sets the jail_time_keysign of this Int64Constants.


        :param jail_time_keysign: The jail_time_keysign of this Int64Constants.  # noqa: E501
        :type: int
        """
        if jail_time_keysign is None:
            raise ValueError("Invalid value for `jail_time_keysign`, must not be `None`")  # noqa: E501

        self._jail_time_keysign = jail_time_keysign

    @property
    def lack_of_observation_penalty(self):
        """Gets the lack_of_observation_penalty of this Int64Constants.  # noqa: E501


        :return: The lack_of_observation_penalty of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._lack_of_observation_penalty

    @lack_of_observation_penalty.setter
    def lack_of_observation_penalty(self, lack_of_observation_penalty):
        """Sets the lack_of_observation_penalty of this Int64Constants.


        :param lack_of_observation_penalty: The lack_of_observation_penalty of this Int64Constants.  # noqa: E501
        :type: int
        """
        if lack_of_observation_penalty is None:
            raise ValueError("Invalid value for `lack_of_observation_penalty`, must not be `None`")  # noqa: E501

        self._lack_of_observation_penalty = lack_of_observation_penalty

    @property
    def liquidity_lock_up_blocks(self):
        """Gets the liquidity_lock_up_blocks of this Int64Constants.  # noqa: E501


        :return: The liquidity_lock_up_blocks of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._liquidity_lock_up_blocks

    @liquidity_lock_up_blocks.setter
    def liquidity_lock_up_blocks(self, liquidity_lock_up_blocks):
        """Sets the liquidity_lock_up_blocks of this Int64Constants.


        :param liquidity_lock_up_blocks: The liquidity_lock_up_blocks of this Int64Constants.  # noqa: E501
        :type: int
        """
        if liquidity_lock_up_blocks is None:
            raise ValueError("Invalid value for `liquidity_lock_up_blocks`, must not be `None`")  # noqa: E501

        self._liquidity_lock_up_blocks = liquidity_lock_up_blocks

    @property
    def max_available_pools(self):
        """Gets the max_available_pools of this Int64Constants.  # noqa: E501


        :return: The max_available_pools of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._max_available_pools

    @max_available_pools.setter
    def max_available_pools(self, max_available_pools):
        """Sets the max_available_pools of this Int64Constants.


        :param max_available_pools: The max_available_pools of this Int64Constants.  # noqa: E501
        :type: int
        """
        if max_available_pools is None:
            raise ValueError("Invalid value for `max_available_pools`, must not be `None`")  # noqa: E501

        self._max_available_pools = max_available_pools

    @property
    def max_swaps_per_block(self):
        """Gets the max_swaps_per_block of this Int64Constants.  # noqa: E501


        :return: The max_swaps_per_block of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._max_swaps_per_block

    @max_swaps_per_block.setter
    def max_swaps_per_block(self, max_swaps_per_block):
        """Sets the max_swaps_per_block of this Int64Constants.


        :param max_swaps_per_block: The max_swaps_per_block of this Int64Constants.  # noqa: E501
        :type: int
        """
        if max_swaps_per_block is None:
            raise ValueError("Invalid value for `max_swaps_per_block`, must not be `None`")  # noqa: E501

        self._max_swaps_per_block = max_swaps_per_block

    @property
    def min_rune_pool_depth(self):
        """Gets the min_rune_pool_depth of this Int64Constants.  # noqa: E501


        :return: The min_rune_pool_depth of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._min_rune_pool_depth

    @min_rune_pool_depth.setter
    def min_rune_pool_depth(self, min_rune_pool_depth):
        """Sets the min_rune_pool_depth of this Int64Constants.


        :param min_rune_pool_depth: The min_rune_pool_depth of this Int64Constants.  # noqa: E501
        :type: int
        """
        if min_rune_pool_depth is None:
            raise ValueError("Invalid value for `min_rune_pool_depth`, must not be `None`")  # noqa: E501

        self._min_rune_pool_depth = min_rune_pool_depth

    @property
    def min_slash_points_for_bad_validator(self):
        """Gets the min_slash_points_for_bad_validator of this Int64Constants.  # noqa: E501


        :return: The min_slash_points_for_bad_validator of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._min_slash_points_for_bad_validator

    @min_slash_points_for_bad_validator.setter
    def min_slash_points_for_bad_validator(self, min_slash_points_for_bad_validator):
        """Sets the min_slash_points_for_bad_validator of this Int64Constants.


        :param min_slash_points_for_bad_validator: The min_slash_points_for_bad_validator of this Int64Constants.  # noqa: E501
        :type: int
        """
        if min_slash_points_for_bad_validator is None:
            raise ValueError("Invalid value for `min_slash_points_for_bad_validator`, must not be `None`")  # noqa: E501

        self._min_slash_points_for_bad_validator = min_slash_points_for_bad_validator

    @property
    def min_swaps_per_block(self):
        """Gets the min_swaps_per_block of this Int64Constants.  # noqa: E501


        :return: The min_swaps_per_block of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._min_swaps_per_block

    @min_swaps_per_block.setter
    def min_swaps_per_block(self, min_swaps_per_block):
        """Sets the min_swaps_per_block of this Int64Constants.


        :param min_swaps_per_block: The min_swaps_per_block of this Int64Constants.  # noqa: E501
        :type: int
        """
        if min_swaps_per_block is None:
            raise ValueError("Invalid value for `min_swaps_per_block`, must not be `None`")  # noqa: E501

        self._min_swaps_per_block = min_swaps_per_block

    @property
    def minimum_bond_in_rune(self):
        """Gets the minimum_bond_in_rune of this Int64Constants.  # noqa: E501


        :return: The minimum_bond_in_rune of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._minimum_bond_in_rune

    @minimum_bond_in_rune.setter
    def minimum_bond_in_rune(self, minimum_bond_in_rune):
        """Sets the minimum_bond_in_rune of this Int64Constants.


        :param minimum_bond_in_rune: The minimum_bond_in_rune of this Int64Constants.  # noqa: E501
        :type: int
        """
        if minimum_bond_in_rune is None:
            raise ValueError("Invalid value for `minimum_bond_in_rune`, must not be `None`")  # noqa: E501

        self._minimum_bond_in_rune = minimum_bond_in_rune

    @property
    def minimum_nodes_for_bft(self):
        """Gets the minimum_nodes_for_bft of this Int64Constants.  # noqa: E501


        :return: The minimum_nodes_for_bft of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._minimum_nodes_for_bft

    @minimum_nodes_for_bft.setter
    def minimum_nodes_for_bft(self, minimum_nodes_for_bft):
        """Sets the minimum_nodes_for_bft of this Int64Constants.


        :param minimum_nodes_for_bft: The minimum_nodes_for_bft of this Int64Constants.  # noqa: E501
        :type: int
        """
        if minimum_nodes_for_bft is None:
            raise ValueError("Invalid value for `minimum_nodes_for_bft`, must not be `None`")  # noqa: E501

        self._minimum_nodes_for_bft = minimum_nodes_for_bft

    @property
    def minimum_nodes_for_yggdrasil(self):
        """Gets the minimum_nodes_for_yggdrasil of this Int64Constants.  # noqa: E501


        :return: The minimum_nodes_for_yggdrasil of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._minimum_nodes_for_yggdrasil

    @minimum_nodes_for_yggdrasil.setter
    def minimum_nodes_for_yggdrasil(self, minimum_nodes_for_yggdrasil):
        """Sets the minimum_nodes_for_yggdrasil of this Int64Constants.


        :param minimum_nodes_for_yggdrasil: The minimum_nodes_for_yggdrasil of this Int64Constants.  # noqa: E501
        :type: int
        """
        if minimum_nodes_for_yggdrasil is None:
            raise ValueError("Invalid value for `minimum_nodes_for_yggdrasil`, must not be `None`")  # noqa: E501

        self._minimum_nodes_for_yggdrasil = minimum_nodes_for_yggdrasil

    @property
    def native_transaction_fee(self):
        """Gets the native_transaction_fee of this Int64Constants.  # noqa: E501


        :return: The native_transaction_fee of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._native_transaction_fee

    @native_transaction_fee.setter
    def native_transaction_fee(self, native_transaction_fee):
        """Sets the native_transaction_fee of this Int64Constants.


        :param native_transaction_fee: The native_transaction_fee of this Int64Constants.  # noqa: E501
        :type: int
        """
        if native_transaction_fee is None:
            raise ValueError("Invalid value for `native_transaction_fee`, must not be `None`")  # noqa: E501

        self._native_transaction_fee = native_transaction_fee

    @property
    def new_pool_cycle(self):
        """Gets the new_pool_cycle of this Int64Constants.  # noqa: E501


        :return: The new_pool_cycle of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._new_pool_cycle

    @new_pool_cycle.setter
    def new_pool_cycle(self, new_pool_cycle):
        """Sets the new_pool_cycle of this Int64Constants.


        :param new_pool_cycle: The new_pool_cycle of this Int64Constants.  # noqa: E501
        :type: int
        """

        self._new_pool_cycle = new_pool_cycle

    @property
    def observation_delay_flexibility(self):
        """Gets the observation_delay_flexibility of this Int64Constants.  # noqa: E501


        :return: The observation_delay_flexibility of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._observation_delay_flexibility

    @observation_delay_flexibility.setter
    def observation_delay_flexibility(self, observation_delay_flexibility):
        """Sets the observation_delay_flexibility of this Int64Constants.


        :param observation_delay_flexibility: The observation_delay_flexibility of this Int64Constants.  # noqa: E501
        :type: int
        """
        if observation_delay_flexibility is None:
            raise ValueError("Invalid value for `observation_delay_flexibility`, must not be `None`")  # noqa: E501

        self._observation_delay_flexibility = observation_delay_flexibility

    @property
    def observe_slash_points(self):
        """Gets the observe_slash_points of this Int64Constants.  # noqa: E501


        :return: The observe_slash_points of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._observe_slash_points

    @observe_slash_points.setter
    def observe_slash_points(self, observe_slash_points):
        """Sets the observe_slash_points of this Int64Constants.


        :param observe_slash_points: The observe_slash_points of this Int64Constants.  # noqa: E501
        :type: int
        """
        if observe_slash_points is None:
            raise ValueError("Invalid value for `observe_slash_points`, must not be `None`")  # noqa: E501

        self._observe_slash_points = observe_slash_points

    @property
    def old_validator_rate(self):
        """Gets the old_validator_rate of this Int64Constants.  # noqa: E501


        :return: The old_validator_rate of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._old_validator_rate

    @old_validator_rate.setter
    def old_validator_rate(self, old_validator_rate):
        """Sets the old_validator_rate of this Int64Constants.


        :param old_validator_rate: The old_validator_rate of this Int64Constants.  # noqa: E501
        :type: int
        """
        if old_validator_rate is None:
            raise ValueError("Invalid value for `old_validator_rate`, must not be `None`")  # noqa: E501

        self._old_validator_rate = old_validator_rate

    @property
    def outbound_transaction_fee(self):
        """Gets the outbound_transaction_fee of this Int64Constants.  # noqa: E501


        :return: The outbound_transaction_fee of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._outbound_transaction_fee

    @outbound_transaction_fee.setter
    def outbound_transaction_fee(self, outbound_transaction_fee):
        """Sets the outbound_transaction_fee of this Int64Constants.


        :param outbound_transaction_fee: The outbound_transaction_fee of this Int64Constants.  # noqa: E501
        :type: int
        """
        if outbound_transaction_fee is None:
            raise ValueError("Invalid value for `outbound_transaction_fee`, must not be `None`")  # noqa: E501

        self._outbound_transaction_fee = outbound_transaction_fee

    @property
    def pool_cycle(self):
        """Gets the pool_cycle of this Int64Constants.  # noqa: E501


        :return: The pool_cycle of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._pool_cycle

    @pool_cycle.setter
    def pool_cycle(self, pool_cycle):
        """Sets the pool_cycle of this Int64Constants.


        :param pool_cycle: The pool_cycle of this Int64Constants.  # noqa: E501
        :type: int
        """
        if pool_cycle is None:
            raise ValueError("Invalid value for `pool_cycle`, must not be `None`")  # noqa: E501

        self._pool_cycle = pool_cycle

    @property
    def signing_transaction_period(self):
        """Gets the signing_transaction_period of this Int64Constants.  # noqa: E501


        :return: The signing_transaction_period of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._signing_transaction_period

    @signing_transaction_period.setter
    def signing_transaction_period(self, signing_transaction_period):
        """Sets the signing_transaction_period of this Int64Constants.


        :param signing_transaction_period: The signing_transaction_period of this Int64Constants.  # noqa: E501
        :type: int
        """
        if signing_transaction_period is None:
            raise ValueError("Invalid value for `signing_transaction_period`, must not be `None`")  # noqa: E501

        self._signing_transaction_period = signing_transaction_period

    @property
    def virtual_mult_synths(self):
        """Gets the virtual_mult_synths of this Int64Constants.  # noqa: E501


        :return: The virtual_mult_synths of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._virtual_mult_synths

    @virtual_mult_synths.setter
    def virtual_mult_synths(self, virtual_mult_synths):
        """Sets the virtual_mult_synths of this Int64Constants.


        :param virtual_mult_synths: The virtual_mult_synths of this Int64Constants.  # noqa: E501
        :type: int
        """
        if virtual_mult_synths is None:
            raise ValueError("Invalid value for `virtual_mult_synths`, must not be `None`")  # noqa: E501

        self._virtual_mult_synths = virtual_mult_synths

    @property
    def ygg_fund_limit(self):
        """Gets the ygg_fund_limit of this Int64Constants.  # noqa: E501


        :return: The ygg_fund_limit of this Int64Constants.  # noqa: E501
        :rtype: int
        """
        return self._ygg_fund_limit

    @ygg_fund_limit.setter
    def ygg_fund_limit(self, ygg_fund_limit):
        """Sets the ygg_fund_limit of this Int64Constants.


        :param ygg_fund_limit: The ygg_fund_limit of this Int64Constants.  # noqa: E501
        :type: int
        """
        if ygg_fund_limit is None:
            raise ValueError("Invalid value for `ygg_fund_limit`, must not be `None`")  # noqa: E501

        self._ygg_fund_limit = ygg_fund_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Int64Constants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Int64Constants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
